Conway's Game of Life
CS280-004 SPRING 2013
Project #1

Questions?

Please e-mail me @ pkurpiewski AT gmail DOT com if you have any questions about
anything in here. I know I went a little overboard, just kind of got swept up in
project and had a real swell time working on it. Thanks!

Notes:

When I wrote the program initially, I misread the way that the input was requested.
Instead of being a traditional (x, y) coordinate pair system, the requested input 
was row by column, so more like (y, x). As a result, this submission utilizes (x, y)
coordinate pairs, ordering. I wasn't entirely sure if I had enough time, after noticing
this, to correct it and properly test it to make sure there weren't any knock-on 
effects from changing it. However, given the modularity of the code, it should be 
fairly simple to correct the way the input class parses input, read the first 
part of the coordinate pair to the dimensions[1] array element (corresponds with y)
and the second part of the pair to dimensions[0] element (corresponds with x).

With the output, I opted to include a line after each game board iteration in the output
displaying what the current generation was. This functionality is useful to have when
running methuselahs, since certain events tend to happen in certain generations, provided 
that the input conditions match. i.e. with an R-pentomino, a glider is released during
generation #69, and this was the first glider ever observed in cellular automata.

I also added support for a configuration file with a name defined as config.life. 
This is a very basic configuration file, containing only three characters.
Character 1: Character used for Live cells in the game. (default X)
Character 2: Character used for Dead cells in the game. (default _)
Character 3: 'n' sets the iterator to run treating the matrix as looping from side
			  to side (left/right) and the cells above and below the matrix (top/bottom)
			  as just dead lines.
			  
			  't' (or any other character, since this is a two state variable as is) sets
			  the iterator to run treating the matrix toroidally. This way, both left/right
			  and top/bottom properly loop around. 

Aside from these changes, everything runs as-spec, as far as I can tell.

Testing to determine whether or not the board changes or not is done by checking
deep equality of the two 2d char[][] arrays.

Package Structure:

Source code is in the src subdirectory, compiled class files are in class.
The five start files provided for the project are in provided_initial
	There are two subdirectories in here, one with the exact ones that you provided
	and one with those same coordinate pairs flipped to (x, y), since that's the 
	default input that the program is designed to accept.
Some other start conditions I transcribed are in other_fun_starts.
